==27004== Helgrind, a thread error detector
==27004== Copyright (C) 2007-2017, and GNU GPL'd, by OpenWorks LLP et al.
==27004== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==27004== Command: ./main.out
==27004== Parent PID: 4983
==27004== 
==27004== ---Thread-Announcement------------------------------------------
==27004== 
==27004== Thread #1 is the program's root thread
==27004== 
==27004== ---Thread-Announcement------------------------------------------
==27004== 
==27004== Thread #2 was created
==27004==    at 0x4BB3282: clone (clone.S:71)
==27004==    by 0x487A2EB: create_thread (createthread.c:101)
==27004==    by 0x487BE0F: pthread_create@@GLIBC_2.2.5 (pthread_create.c:817)
==27004==    by 0x4842917: ??? (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_helgrind-amd64-linux.so)
==27004==    by 0x496C048: std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)
==27004==    by 0x1094BE: std::thread::thread<void (&)(), , void>(void (&)()) (thread:130)
==27004==    by 0x1092B1: main (main.cpp:13)
==27004== 
==27004== ----------------------------------------------------------------
==27004== 
==27004== Possible data race during read of size 4 at 0x10C01C by thread #1
==27004== Locks held: none
==27004==    at 0x1092B2: main (main.cpp:14)
==27004== 
==27004== This conflicts with a previous write of size 4 by thread #2
==27004== Locks held: none
==27004==    at 0x10927A: inc_value() (main.cpp:8)
==27004==    by 0x109C73: void std::__invoke_impl<void, void (*)()>(std::__invoke_other, void (*&&)()) (invoke.h:60)
==27004==    by 0x109C0B: std::__invoke_result<void (*)()>::type std::__invoke<void (*)()>(void (*&&)()) (invoke.h:95)
==27004==    by 0x109B9D: void std::thread::_Invoker<std::tuple<void (*)()> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (thread:244)
==27004==    by 0x109B5A: std::thread::_Invoker<std::tuple<void (*)()> >::operator()() (thread:251)
==27004==    by 0x109B2B: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::_M_run() (thread:195)
==27004==    by 0x496BD83: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)
==27004==    by 0x4842B1A: ??? (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_helgrind-amd64-linux.so)
==27004==  Address 0x10c01c is 0 bytes inside data symbol "global_value"
==27004== 
==27004== ----------------------------------------------------------------
==27004== 
==27004== Possible data race during write of size 4 at 0x10C01C by thread #1
==27004== Locks held: none
==27004==    at 0x1092BB: main (main.cpp:14)
==27004== 
==27004== This conflicts with a previous write of size 4 by thread #2
==27004== Locks held: none
==27004==    at 0x10927A: inc_value() (main.cpp:8)
==27004==    by 0x109C73: void std::__invoke_impl<void, void (*)()>(std::__invoke_other, void (*&&)()) (invoke.h:60)
==27004==    by 0x109C0B: std::__invoke_result<void (*)()>::type std::__invoke<void (*)()>(void (*&&)()) (invoke.h:95)
==27004==    by 0x109B9D: void std::thread::_Invoker<std::tuple<void (*)()> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) (thread:244)
==27004==    by 0x109B5A: std::thread::_Invoker<std::tuple<void (*)()> >::operator()() (thread:251)
==27004==    by 0x109B2B: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)()> > >::_M_run() (thread:195)
==27004==    by 0x496BD83: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)
==27004==    by 0x4842B1A: ??? (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_helgrind-amd64-linux.so)
==27004==  Address 0x10c01c is 0 bytes inside data symbol "global_value"
==27004== 
==27004== 
==27004== Use --history-level=approx or =none to gain increased speed, at
==27004== the cost of reduced accuracy of conflicting-access information
==27004== For lists of detected and suppressed errors, rerun with: -s
==27004== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
